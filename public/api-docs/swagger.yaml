openapi: 3.0.0
info:
  title: Scotch-hub/API
  description: >
    A RESTful API for scotch-hub built on Nodejs (Express) with MongoDB Atlas.<br />
    Author [Beerendra M C](https://github.com/beerendramc)
  version: 1.0.0
tags:
  - name: Users
    description: API Doc for Users EndPoints
  - name: Products
    description: API Doc for Products EndPoints
  - name: Cart
    description: API Doc for Cart EndPoints
  - name: Orders
    description: API Doc for Orders EndPoints
servers:
  - url: http://localhost:4000
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthenticatedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              error:
                type: object
    UnauthorizedError:
      description: Access denied
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object

paths:
  /users/signup:
    post:
      tags:
        - Users
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - gender
                - mobile
                - dob
                - password
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                gender:
                  type: string
                mobile:
                  type: number
                dob:
                  type: string
                  format: date
                password:
                  type: string
                  format: password
                address:
                  type: array
                  items:
                    $ref: '#/definitions/schemas/address'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  createdUser:
                    type: object
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/login:
    post:
      tags:
        - Users
      summary: Logs in a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '401':
          description: Login failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/get-all-users:
    get:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Returns a list of users.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/schemas/users'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users:
    get:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Returns the logged in user detail.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      _id:
                        type: string
                        uniqueItems: true
                  - $ref: '#/definitions/schemas/user'
                  - type: object
                    properties:
                      address:
                        type: array
                        items:
                          allOf:
                            - type: object
                              properties:
                                _id:
                                  type: string
                                  uniqueItems: true
                            - $ref: '#/definitions/schemas/address'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Updates the logged in user detail (except address).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                gender:
                  type: string
                mobile:
                  type: number
                dob:
                  type: string
                  format: date
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Deletes the logged in user account.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/address:
    put:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Updates the address of the logged in user. If no address found creates a new one
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    _id:
                      type: string
                      uniqueItems: true
                - $ref: '#/definitions/schemas/address'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        _id:
                          type: string
                          uniqueItems: true
                    - $ref: '#/definitions/schemas/address'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/address/{addressId}:
    delete:
      tags:
        - Users
      security:
        - BearerAuth: []
      summary: Deletes an address.
      parameters:
        - in: path
          name: addressId
          required: true
          schema:
            type: string
          description: The Address ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /products:
    get:
      tags:
        - Products
      summary: Returns a list of products.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/schemas/products'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Creates a product.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - productImage
                - inStock
              properties:
                name:
                  type: string
                price:
                  type: number
                productImage:
                  type: string
                  format: binary
                inStock:
                  type: number
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  createdProduct:
                    $ref: '#/definitions/schemas/product'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /products/{productId}:
    get:
      tags:
        - Products
      summary: Returns a product.
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: The Product ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/schemas/product'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Updates a product.
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: The Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                inStock:
                  type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Products
      security:
        - BearerAuth: []
      summary: Deletes a product.
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: The Product ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /uploads/{productImageName}:
    get:
      tags:
        - Products
      summary: Returns the image of the product
      parameters:
        - in: path
          name: productImageName
          required: true
          schema:
            type: string
          description: The name of the product image
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /cart:
    get:
      tags:
        - Cart
      security:
        - BearerAuth: []
      summary: Returns a list of cart items of logged in user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    product:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        price:
                          type: number
                    quantity:
                      type: number
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Cart
      security:
        - BearerAuth: []
      summary: Adds a product to the cart of the logged in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
              properties:
                productId:
                  type: string
                quantity:
                  type: number
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  createdCart:
                    allOf:
                      - type: object
                        properties:
                          _id:
                            type: string
                            uniqueItems: true
                      - $ref: '#/definitions/schemas/cart'
        '200':
          description: Could not create due to bad data
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /cart/{cartId}:
    patch:
      tags:
        - Cart
      security:
        - BearerAuth: []
      summary: Updates a cart item
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
          description: The Cart Item ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Cart
      security:
        - BearerAuth: []
      summary: Deletes a cart item.
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
          description: The Cart ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /orders:
    get:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Returns a list of orders of logged in user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    product:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        price:
                          type: number
                    quantity:
                      type: number
                    orderDate:
                      type: string
                      format: date
                    shippingAddress:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: string
                              uniqueItems: true
                        - $ref: '#/definitions/schemas/address'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Creates a new order to the logged in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - productId
                  - quantity
                  - shippingAddress
                properties:
                  productId:
                    type: string
                  quantity:
                    type: number
                  shippingAddress:
                    type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  createdOrders:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        productId:
                          type: string
                        quantity:
                          type: number
                        orderDate:
                          type: string
                          format: date
                        shippingAddress:
                          type: string
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /orders/{orderId}:
    delete:
      tags:
        - Orders
      security:
        - BearerAuth: []
      summary: Deletes an order of the logged in user.
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
          description: The Order ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
definitions:
  schemas:
    user:
      type: object
      properties:
        name:
          type: object
          properties:
            first:
              type: string
            last:
              type: string
        email:
          type: string
        gender:
          type: string
        mobile:
          type: number
        dob:
          type: string
          format: date
    address:
      type: object
      properties:
        houseOrBuilding:
          type: string
        area:
          type: string
        landmark:
          type: string
        city:
          type: string
        pincode:
          type: number
        state:
          type: string
        addressType:
          type: string
    cart:
      type: object
      required:
        - productId
        - userId
      properties:
        productId:
          type: string
        quantity:
          type: number
        userId:
          type: string
    users:
      type: array
      items:
        allOf:
          - type: object
            properties:
              _id:
                type: string
                uniqueItems: true
          - $ref: '#/definitions/schemas/user'
          - type: object
            properties:
              address:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        _id:
                          type: string
                          uniqueItems: true
                    - $ref: '#/definitions/schemas/address'
    product:
      type: object
      properties:
        _id:
          type: string
          uniqueItems: true
        name:
          type: string
        price:
          type: number
        productImage:
          type: string
        inStock:
          type: number
    products:
      type: array
      items:
        $ref: '#/definitions/schemas/product'
